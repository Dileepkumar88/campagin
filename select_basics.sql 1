1_select_basics.sql 
@@ -0,0 +1,36 @@
-- SQLZoo

-- SELECT BASICS
-- #1 Show the population of Germany
SELECT population
FROM world
WHERE name = 'Germany';

-- #2. Show the per capita gdp: gdp/population for each country where the
-- # area is over 5,000,000 km2
SELECT name, gdp/population
FROM world
WHERE area > 5000000;

-- #3. Show the name and continent where the area is less then 2000 and the 
-- # gdp is more than 5000000000
SELECT name, continent
FROM world
WHERE area < 2000
AND gdp > 5000000000;

-- #4. Show the name and the population for 'Denmark', 'Finland', 'Norway', 
-- # 'Sweden'
SELECT name, population
FROM world
WHERE name IN ('Denmark', 'Finland', 'Norway', 'Sweden');

-- #5. Show each country that begins with G.
SELECT name
FROM world
WHERE name LIKE 'G%';

-- #6. Show the area in 1000 square km. Show area/1000 instead of area
SELECT name, area/1000
FROM world
WHERE area BETWEEN 207600 AND 244820; 

------------------------------------------------------------------------------------------------------
 35  2_select_from_world.sql 
@@ -0,0 +1,35 @@
-- # 1. Read the notes about this table. Observe the result of running
-- # a simple SQL command.
SELECT name, continent, population
FROM world;

-- # 2. Show the name for the countries that have a population of at
-- # least 200 million. (200 million is 200000000, there are eight
-- # zeros)
SELECT name
FROM world
WHERE population > 200000000;

-- # 3. Give the name and the per capita GDP for those countries with a
-- # population of at least 200 million.
SELECT name, gdp/population
FROM world
WHERE population > 200000000;

-- # 4. Show the name and population in millions for the countries of
-- # 'South America' Divide the population by 1000000 to get population
-- # in millions.
SELECT name, population/1000000
FROM world
WHERE continent = 'South America';

-- # 5. Show the name and population for 'France', 'Germany', 'Italy'
SELECT name, population
FROM world
WHERE name IN ('France', 'Germany', 'Italy');

-- # 6. Identify the countries which have names including the word
-- # 'United'
SELECT name
FROM world
WHERE name LIKE 'United%'; 
--------------------------------------------------------------------------------------------------------
 49  3_select_from_nobel.sql 
@@ -0,0 +1,49 @@
-- # 1. Change the query shown so that it displays Nobel prizes for
-- # 1950.
SELECT yr, subject, winner
FROM nobel
WHERE yr = 1950;

-- # 2. Show who won the 1962 prize for Literature.
SELECT winner
FROM nobel
WHERE yr = 1962 
AND subject = 'Literature';

-- # 3. Show the year and subject that won 'Albert Einstein' his prize.
SELECT yr, subject
FROM nobel
WHERE winner = 'Albert Einstein';

-- # 4. Give the name of the 'Peace' winners since the year 2000,
-- # including 2000.
SELECT winner
FROM nobel
WHERE subject = 'Peace' 
AND yr >= 2000;

-- # 5. Show all details (yr, subject, winner) of the Literature prize
-- # winners for 1980 to 1989 inclusive.
SELECT *
FROM nobel
WHERE subject = 'Literature'
AND yr BETWEEN 1980 AND 1989;

-- # 6. Show all details of the presidential winners: ('Theodore
-- # Roosevelt', 'Woodrow Wilson', 'Jed Bartlet', 'Jimmy Carter')
SELECT yr, subject, winner
FROM nobel
WHERE winner IN ('Theodore Roosevelt', 'Woodrow Wilson', 'Jed Bartlet', 'Jimmy Carter');

-- # 7. Show the winners with first name John
SELECT winner
FROM nobel
WHERE winner LIKE 'John%';

-- # 8. In which years was the Physics prize awarded but no Chemistry prize.
SELECT DISTINCT yr FROM nobel
WHERE subject = 'Physics'
AND yr NOT IN
  (SELECT yr
  FROM nobel
  WHERE subject = 'Chemistry') 
  --------------------------------------------------------------------------------------------------
  
 79  4_select_within_select.sql 
@@ -0,0 +1,79 @@
-- # 1. List each country name where the population is larger than
-- # 'Russia'.
SELECT name
FROM world
WHERE population > (
  SELECT population
  FROM world
  WHERE name = 'Russia');

-- # 2. List the name and continent of countries in the continents
-- # containing 'Belize', 'Belgium'.
SELECT name, continent
FROM world
WHERE continent IN (
  SELECT continent 
  FROM world
  WHERE name IN ('Belize', 'Belgium'));

-- # 3. Show the countries in Europe with a per capita GDP greater than
-- # 'United Kingdom'.
SELECT name
FROM world
WHERE continent = 'Europe'
AND gdp/population > (
  SELECT gdp/population
  FROM world
  WHERE name = 'United Kingdom');

-- # 4. Which country has a population that is more than Canada but
-- # less than Poland? Show the name and the population.
SELECT name, population
FROM world
WHERE population > (
  SELECT population
  FROM world
  WHERE name = 'Canada')
AND population < (
  SELECT population
  FROM world
  WHERE name = 'Poland');

-- # 5. Which countries have a GDP greater than any country in Europe?
-- # [Give the name only.]
SELECT name
FROM world
WHERE gdp > (
  SELECT MAX(gdp)
  FROM world
  WHERE continent = 'Europe');

-- # 6. Find the largest country (by area) in each continent, show the 
-- # continent, the name and the area.
SELECT x.continent, x.name, x.area
FROM world AS x
WHERE x.area = (
  SELECT MAX(y.area)
  FROM world AS y
  WHERE x.continent = y.continent)

-- # 7. Find each country that belongs to a continent where all
-- # populations are less than 25000000. Show name, continent and
-- # population.
SELECT x.name, x.continent, x.population
FROM world AS x
WHERE 25000000 > ALL (
  SELECT y.population
  FROM world AS y
  WHERE x.continent = y.continent);

-- # 8. Some countries have populations more than three times that of
-- # any of their neighbours (in the same continent). Give the
-- # countries and continents.
SELECT x.name, x.continent
FROM world AS x
WHERE x.population/3 > ALL (
  SELECT y.population
  FROM world AS y
  WHERE x.continent = y.continent
  AND x.name != y.name); 
  
  ------------------------------------------------------------------------------------------------------------------------
  
  
 41  5_sum_and_count.sql 
@@ -0,0 +1,41 @@
-- # 1. Show the total population of the world.
SELECT SUM(population)
FROM world;

-- # 2. List all the continents - just once each.
SELECT DISTINCT continent
FROM world;

-- # 3. Give the total GDP of Africa
SELECT SUM(gdp)
FROM world
WHERE continent = 'Africa';

-- # 4. How many countries have an area of at least 1000000
SELECT COUNT(name)
FROM world
WHERE area >= 1000000;

-- # 5. What is the total population of ('France','Germany','Spain')
SELECT SUM(population)
FROM world
WHERE name IN ('France', 'Germany', 'Spain');

-- # 6. For each continent show the continent and number of countries.
SELECT continent, COUNT(name)
FROM world
GROUP BY continent;

-- # 7. For each continent show the continent and number of countries
-- # with populations of at least 10 million.
SELECT continent, COUNT(name)
FROM world
WHERE population >= 10000000
GROUP BY continent;

-- # 8. List the continents with total populations of at least 100
-- # million.
SELECT continent
FROM world
GROUP BY continent
HAVING SUM(population) >= 100000000;

---------------------------------------------------------------------------------------

 110  6_join.sql 
@@ -0,0 +1,110 @@
-- # 1. Show matchid and player name for all goals scored by
-- # Germany. teamid = 'GER'.
SELECT matchid, player
FROM goal
WHERE teamid = 'GER';

-- # 2. Show id, stadium, team1, team2 for game 1012.
SELECT id, stadium, team1, team2
FROM game
WHERE id = 1012;

-- # 3. Show the player, teamid and mdate and for every German
-- # goal. teamid='GER'.
SELECT goal.player, goal.teamid, game.mdate
FROM goal
JOIN game
ON goal.matchid = game.id
WHERE goal.teamid = 'GER';

-- # 4. Show the team1, team2 and player for every goal scored by a
-- # player called Mario player LIKE 'Mario%'
SELECT game.team1, game.team2, goal.player
FROM game
JOIN goal
ON goal.matchid = game.id
WHERE goal.player LIKE 'Mario%';

-- # 5. Show player, teamid, coach, gtime for all goals scored in the
-- # first 10 minutes gtime<=10
SELECT goal.player, goal.teamid, eteam.coach, goal.gtime
FROM goal
JOIN eteam
ON eteam.id = goal.teamid
WHERE goal.gtime <= 10;

-- # 6. List the the dates of the matches and the name of the team in
-- # which 'Fernando Santos' was the team1 coach.
SELECT game.mdate, eteam.teamname
FROM game
JOIN eteam
ON eteam.id = game.team1
WHERE eteam.coach = 'Fernando Santos';

-- # 7. List the player for every goal scored in a game where the
-- # staium was 'National Stadium, Warsaw'
SELECT goal.player
FROM goal
JOIN game
ON goal.matchid = game.id
WHERE game.stadium = 'National Stadium, Warsaw';

-- # 8. Show names of all players who scored a goal against Germany.
SELECT DISTINCT goal.player
FROM goal
JOIN game
ON goal.matchid = game.id
WHERE goal.teamid != 'GER'
AND (game.team1 = 'GER' OR game.team2 = 'GER';

-- # 9. Show teamname and the total number of goals scored.
SELECT eteam.teamname, COUNT(*)
FROM eteam
JOIN goal
ON eteam.id = goal.teamid
GROUP BY eteam.teamname;

-- # 10. Show the stadium and the number of goals scored in each
-- # stadium.
SELECT game.stadium, COUNT(*)
FROM game
JOIN goal
ON game.id = goal.matchid
GROUP BY game.stadium;

-- # 11. For every match involving 'POL', show the matchid, date and
-- # the number of goals scored.
SELECT game.id, game.mdate, COUNT(*)
FROM game
JOIN goal
ON game.id = goal.matchid
WHERE (game.team1 = 'POL' OR game.team2 = 'POL')
GROUP BY game.id, game.mdate
ORDER BY game.id;

-- # 12. For every match where 'GER' scored, show matchid, match date
-- # and the number of goals scored by 'GER'
SELECT game.id, game.mdate, COUNT(*)
FROM game
JOIN goal
ON goal.matchid = game.id
WHERE goal.teamid = 'GER'
GROUP BY game.id;

-- # 13. List every match with the goals scored by each team as shown.
SELECT game.mdate, 
       game.team1, 
       SUM(CASE WHEN goal.teamid = game.team1
           THEN 1
           ELSE 0
           END) AS score1,
       game.team2,
       SUM(CASE WHEN goal.teamid = game.team2
           THEN 1
           ELSE 0
           END) AS score2
FROM game
JOIN goal
ON (game.id = goal.matchid)
GROUP BY game.id
ORDER BY game.mdate, goal.matchid 

-----------------------------------------------------------------------------------------------------------------

 146  7_more_join_operations.sql 
@@ -0,0 +1,146 @@
-- # 1. List the films where the yr is 1962 [Show id, title]
SELECT id, title
FROM movie
WHERE yr = 1962;

-- # 2. Give year of 'Citizen Kane'.
SELECT yr
FROM movie
WHERE title = 'Citizen Kane';

-- # 3. List all of the Star Trek movies, include the id, title and yr
-- # (all of these movies include the words Star Trek in the
-- # title). Order results by year.
SELECT id, title, yr
FROM movie
WHERE title LIKE '%Star Trek%'
ORDER BY yr;

-- # 4. What are the titles of the films with id 11768, 11955, 21191.
SELECT title
FROM movie
WHERE id IN (11768, 11955, 21191);

-- # 5. What id number does the actor 'Glenn Close' have?
SELECT id
FROM actor
WHERE name = 'Glenn Close';

-- # 6. What is the id of the film 'Casablanca'
SELECT id
FROM movie
WHERE title = 'Casablanca';

-- # 7. Obtain the cast list for 'Casablanca'. Use the id value that
-- # you obtained in the previous question.
SELECT actor.name
FROM actor
JOIN casting
ON casting.actorid = actor.id
WHERE casting.movieid = 11768;

-- # 8. Obtain the cast list for the film 'Alien'.
SELECT actor.name
FROM actor
JOIN casting
ON casting.actorid = actor.id
JOIN movie
ON movie.id = casting.movieid
WHERE movie.title = 'Alien';

-- # 9. List the films in which 'Harrison Ford' has appeared
SELECT movie.title
FROM movie
JOIN casting
ON casting.movieid = movie.id
JOIN actor
ON actor.id = casting.actorid
WHERE actor.name = 'Harrison Ford';

-- # 10. List the films where 'Harrison Ford' has appeared - but not in
-- # the star role. [Note: the ord field of casting gives the position
-- # of the actor. If ord=1 then this actor is in the starring role]
SELECT movie.title
FROM movie
JOIN casting
ON casting.movieid = movie.id
JOIN actor
ON actor.id = casting.actorid
WHERE actor.name = 'Harrison Ford'
AND casting.ord != 1;

-- # 11. List the films together with the leading star for all 1962 films.
SELECT movie.title, actor.name
FROM movie
JOIN casting
ON casting.movieid = movie.id
JOIN actor
ON actor.id = casting.actorid
WHERE movie.yr = 1962
AND casting.ord = 1;

-- # 12. Which were the busiest years for 'John Travolta', show the
-- # year and the number of movies he made each year for any year in
-- # which he made at least 2 movies.
SELECT movie.yr, COUNT(*)
FROM movie
JOIN casting
ON casting.movieid = movie.id
JOIN actor
ON actor.id = casting.actorid
WHERE actor.name = 'John Travolta'
GROUP BY movie.yr
HAVING COUNT(movie.title) >= 2;

-- # 13. List the film title and the leading actor for all of 'Julie
-- # Andrews' films.
SELECT DISTINCT m.title, a.name
FROM (SELECT movie.*
      FROM movie
      JOIN casting
      ON casting.movieid = movie.id
      JOIN actor
      ON actor.id = casting.actorid
      WHERE actor.name = 'Julie Andrews') AS m
JOIN (SELECT actor.*, casting.movieid AS movieid
      FROM actor
      JOIN casting
      ON casting.actorid = actor.id
      WHERE casting.ord = 1) as a
ON m.id = a.movieid
ORDER BY m.title;

-- # 14. Obtain a list of actors in who have had at least 30 starring
-- # roles.
SELECT actor.name
FROM actor
JOIN casting
ON casting.actorid = actor.id
WHERE casting.ord = 1
GROUP BY actor.name
HAVING COUNT(*) >= 30;

-- # 15. List the 1978 films by order of cast list size.
SELECT movie.title, COUNT(*)
FROM movie
JOIN casting
ON movie.id = casting.movieid
WHERE movie.yr = 1978
GROUP BY movie.id
ORDER BY COUNT(*) DESC

-- # 16. List all the people who have worked with 'Art Garfunkel'.
SELECT a.name
  FROM (SELECT movie.*
          FROM movie
          JOIN casting
            ON casting.movieid = movie.id
          JOIN actor
            ON actor.id = casting.actorid
         WHERE actor.name = 'Art Garfunkel') AS m
  JOIN (SELECT actor.*, casting.movieid
          FROM actor
          JOIN casting
            ON casting.actorid = actor.id
         WHERE actor.name != 'Art Garfunkel') as a
    ON m.id = a.movieid;
    
    
    -----------------------------------------------------------------------------------------------------------
    
    
 65  8_using_null.sql 
@@ -0,0 +1,65 @@
-- # 1. List the teachers who have NULL for their department.
SELECT name
  FROM teacher
 WHERE dept IS NULL;

-- # 3. Use a different JOIN so that all teachers are listed.
SELECT teacher.name, dept.name
FROM teacher
LEFT OUTER JOIN dept
ON teacher.dept = dept.id;

-- # 4. Use a different JOIN so that all departments are listed.
SELECT teacher.name, dept.name
FROM teacher
RIGHT OUTER JOIN dept
ON teacher.dept = dept.id;

-- # 5. Use COALESCE to print the mobile number. Use the number '07986
-- #444 2266' there is no number given. Show teacher name and mobile
-- #number or '07986 444 2266'
SELECT name, COALESCE(mobile, '07986 444 2266')
  FROM teacher;

-- # 6. Use the COALESCE function and a LEFT JOIN to print the name and
-- #department name. Use the string 'None' where there is no
-- #department.
SELECT name, COALESCE(dept, 'None')
  FROM teacher;

-- # 7. Use COUNT to show the number of teachers and the number of
-- #mobile phones.
SELECT COUNT(name), COUNT(mobile)
  FROM teacher;

-- # 8. Use COUNT and GROUP BY dept.name to show each department and
-- #the number of staff. Use a RIGHT JOIN to ensure that the
-- #Engineering department is listed.
SELECT dept.name ,COUNT(teacher.name)
FROM teacher
RIGHT OUTER JOIN dept
ON teacher.dept = dept.id
GROUP BY dept.name;

-- #9: Use CASE to show the name of each teacher followed by 'Sci' if
-- #the the teacher is in dept 1 or 2 and 'Art' otherwise.
SELECT teacher.name, 
  CASE
  WHEN teacher.dept IN (1, 2)
  THEN 'Sci'
  ELSE 'Art'
  END
FROM teacher;

-- #10: Use CASE to show the name of each teacher followed by 'Sci' if
-- #the the teacher is in dept 1 or 2 show 'Art' if the dept is 3 and
-- #'None' otherwise.
SELECT teacher.name, 
  CASE
  WHEN teacher.dept IN (1, 2)
  THEN 'Sci'
  WHEN teacher.dept = 3
  THEN 'Art'
  ELSE 'None'
  END
FROM teacher;

----------------------------------------------------------------------------------------------------------

 89  9_self_join.sql 
@@ -0,0 +1,89 @@
-- # 1. How many stops are in the database.
SELECT COUNT(*)
FROM stops;

-- # 2. Find the id value for the stop 'Craiglockhart'
SELECT id
FROM stops
WHERE name = 'Craiglockhart';

-- # 3. Give the id and the name for the stops on the '4' 'LRT'
-- # service.
SELECT stops.id, stops.name
FROM route
JOIN stops
ON route.stop = stops.id
WHERE route.num = 4
AND route.company = 'LRT';

-- # 4. The query shown gives the number of routes that visit either
-- # London Road (149) or Craiglockhart (53). Run the query and notice
-- # the two services that link these stops have a count of 2. Add a
-- # HAVING clause to restrict the output to these two routes.
SELECT company, num
FROM route
WHERE stop IN (149, 53)
GROUP BY company, num
HAVING COUNT(*) = 2;

-- # 5. Execute the self join shown and observe that b.stop gives all
-- # the places you can get to from Craiglockhart. Change the query so
-- # that it shows the services from Craiglockhart to London Road.
SELECT r1.company, r1.num, r1.stop, r2.stop
FROM route AS r1
JOIN route AS r2
ON (r1.company = r2.company)
AND (r1.num = r2.num)
WHERE r1.stop = 53
AND r2.stop = 149;

-- # 6. The query shown is similar to the previous one, however by
-- # joining two copies of the stops table we can refer to stops by
-- # name rather than by number. Change the query so that the services
-- # between 'Craiglockhart' and 'London Road' are shown. If you are
-- # tired of these places try 'Fairmilehead' against 'Tollcross'
SELECT r1.company, r1.num, s1.name, s2.name
FROM route AS r1
JOIN route AS r2
ON (r1.company, r1.num) = (r2.company, r2.num)
JOIN stops AS s1
ON r1.stop = s1.id
JOIN stops AS s2
ON r2.stop = s2.id
WHERE s1.name = 'Craiglockhart'
AND s2.name = 'London Road';

-- # 7. Give a list of all the services which connect stops 115 and 137
-- # ('Haymarket' and 'Leith')
SELECT DISTINCT r1.company, r2.num
FROM route AS r1
JOIN route AS r2
ON (r1.company, r1.num) = (r2.company, r2.num)
WHERE r1.stop = 115
AND r2.stop = 137;

-- # 8. Give a list of the services which connect the stops
-- # 'Craiglockhart' and 'Tollcross'
SELECT r1.company, r1.num, s1.name, s2.name
FROM route AS r1
JOIN route AS r2
ON (r1.company, r1.num) = (r2.company, r2.num)
JOIN stops AS s1
ON r1.stop = s1.id
JOIN stops AS s2
ON r2.stop = s2.id
WHERE s1.name = 'Craiglockhart'
AND s2.name = 'Tollcross';

-- # 9. Give a list of the stops which may be reached from
-- # 'Craiglockhart' by taking one bus. Include the details of the
-- # appropriate service.
SELECT r1.company, r1.num, s1.name, s2.name
FROM route AS r1
JOIN route AS r2
ON (r1.company, r1.num) = (r2.company, r2.num)
JOIN stops AS s1
ON r1.stop = s1.id
JOIN stops AS s2
ON r2.stop = s2.id
WHERE s1.name = 'Craiglockhart'; 
